<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Practical</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h1>Practical</h1>
<p>We can now begin writing test specs for our Todo application, which are listed and separated by component (e.g Models, Collections etc.). It's useful to pay attention to the name of the test, the logic being tested and most importantly the assertions being made as this will give you some insight into how what we've learned can be applied to a complete application.</p><p>To get the most out of this section, I recommend looking at the QUnit Koans included in the <code>practicals\qunit-koans</code> folder - this is a port of the Backbone.js Jasmine Koans over to QUnit that I converted for this post.</p><p><em>In case you haven't had a chance to try out one of the Koans kits as yet, they are a set of unit tests using a specific testing framework that both demonstrate how a set of specs for an application may be written, but also leave some tests unfilled so that you can complete them as an exercise.</em></p><h3 id="models">Models</h3><p>For our models we want to at minimum test that:</p><ul><li>New instances can be created with the expected default values</li><li>Attributes can be set and retrieved correctly</li><li>Changes to state correctly fire off custom events where needed</li><li>Validation rules are correctly enforced</li></ul><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;About Backbone.Model&#39;</span>);

test(<span class="ch">&#39;Can be created with default values for its attributes.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> todo = <span class="kw">new</span> Todo();

    equal( <span class="kw">todo</span>.<span class="fu">get</span>(<span class="ch">&#39;text&#39;</span>), <span class="st">&quot;&quot;</span> );
});

test(<span class="ch">&#39;Will set attributes on the model instance when created.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">3</span> );

    <span class="kw">var</span> todo = <span class="kw">new</span> Todo( { <span class="dt">text</span>: <span class="ch">&#39;Get oil change for car.&#39;</span> } );

    equal( <span class="kw">todo</span>.<span class="fu">get</span>(<span class="ch">&#39;text&#39;</span>), <span class="st">&quot;Get oil change for car.&quot;</span> );
    equal( <span class="kw">todo</span>.<span class="fu">get</span>(<span class="ch">&#39;done&#39;</span>), <span class="kw">false</span> );
    equal( <span class="kw">todo</span>.<span class="fu">get</span>(<span class="ch">&#39;order&#39;</span>), <span class="dv">0</span> );
});

test(<span class="ch">&#39;Will call a custom initialize function on the model instance when created.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> toot = <span class="kw">new</span> Todo({ <span class="dt">text</span>: <span class="ch">&#39;Stop monkeys from throwing their own crap!&#39;</span> });
    equal( <span class="kw">toot</span>.<span class="fu">get</span>(<span class="ch">&#39;text&#39;</span>), <span class="ch">&#39;Stop monkeys from throwing their own rainbows!&#39;</span> );
});

test(<span class="ch">&#39;Fires a custom event when the state changes.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> spy = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> todo = <span class="kw">new</span> Todo();

    <span class="kw">todo</span>.<span class="fu">bind</span>( <span class="ch">&#39;change&#39;</span>, spy );
    <span class="co">// How would you update a property on the todo here?</span>
    <span class="co">// Hint: http://documentcloud.github.com/backbone/#Model-set</span>
    <span class="kw">todo</span>.<span class="fu">set</span>( { <span class="dt">text</span>: <span class="st">&quot;new text&quot;</span> } );

    ok( <span class="kw">spy</span>.<span class="fu">calledOnce</span>, <span class="st">&quot;A change event callback was correctly triggered&quot;</span> );
});


test(<span class="ch">&#39;Can contain custom validation rules, and will trigger an error event on failed validation.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">3</span> );

    <span class="kw">var</span> errorCallback = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> todo = <span class="kw">new</span> Todo();

    <span class="kw">todo</span>.<span class="fu">bind</span>(<span class="ch">&#39;error&#39;</span>, errorCallback);
    <span class="co">// What would you need to set on the todo properties to cause validation to fail?</span>
    <span class="kw">todo</span>.<span class="fu">set</span>( { <span class="dt">done</span>: <span class="st">&quot;not a boolean&quot;</span> } );

    ok( <span class="kw">errorCallback</span>.<span class="fu">called</span>, <span class="ch">&#39;A failed validation correctly triggered an error&#39;</span> );
    notEqual( <span class="kw">errorCallback</span>.<span class="fu">getCall</span>(<span class="dv">0</span>), undefined );
    equal( <span class="kw">errorCallback</span>.<span class="fu">getCall</span>(<span class="dv">0</span>).<span class="fu">args</span>[<span class="dv">1</span>], <span class="ch">&#39;Todo.done must be a boolean value.&#39;</span> );

});</code></pre><h3 id="collections">Collections</h3><p>For our collection we'll want to test that:</p><ul><li>New model instances can be added as both objects and arrays</li><li>Changes to models result in any necessary custom events being fired</li><li>A <code>url</code> property for defining the URL structure for models is correctly defined</li></ul><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;About Backbone.Collection&#39;</span>);

test( <span class="ch">&#39;Can add Model instances as objects and arrays.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">3</span> );

    <span class="kw">var</span> todos = <span class="kw">new</span> TodoList();
    equal( <span class="kw">todos</span>.<span class="fu">length</span>, <span class="dv">0</span> );

    <span class="kw">todos</span>.<span class="fu">add</span>( { <span class="dt">text</span>: <span class="ch">&#39;Clean the kitchen&#39;</span> } );
    equal( <span class="kw">todos</span>.<span class="fu">length</span>, <span class="dv">1</span> );

    <span class="kw">todos</span>.<span class="fu">add</span>([
        { <span class="dt">text</span>: <span class="ch">&#39;Do the laundry&#39;</span>, <span class="dt">done</span>: <span class="kw">true</span> }, 
        { <span class="dt">text</span>: <span class="ch">&#39;Go to the gym&#39;</span> }
    ]);

    equal( <span class="kw">todos</span>.<span class="fu">length</span>, <span class="dv">3</span> );
});

test( <span class="ch">&#39;Can have a url property to define the basic url structure for all contained models.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );
    <span class="kw">var</span> todos = <span class="kw">new</span> TodoList();
    equal( <span class="kw">todos</span>.<span class="fu">url</span>, <span class="ch">&#39;/todos/&#39;</span> );
});

test(<span class="ch">&#39;Fires custom named events when the models change.&#39;</span>, <span class="kw">function</span>() {
    expect(<span class="dv">2</span>);

    <span class="kw">var</span> todos = <span class="kw">new</span> TodoList();
    <span class="kw">var</span> addModelCallback = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> removeModelCallback = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">todos</span>.<span class="fu">bind</span>( <span class="ch">&#39;add&#39;</span>, addModelCallback );
    <span class="kw">todos</span>.<span class="fu">bind</span>( <span class="ch">&#39;remove&#39;</span>, removeModelCallback );

    <span class="co">// How would you get the &#39;add&#39; event to trigger?</span>
    <span class="kw">todos</span>.<span class="fu">add</span>( {<span class="dt">text</span>:<span class="st">&quot;New todo&quot;</span>} );

    ok( <span class="kw">addModelCallback</span>.<span class="fu">called</span> );

    <span class="co">// How would you get the &#39;remove&#39; callback to trigger?</span>
    <span class="kw">todos</span>.<span class="fu">remove</span>( <span class="kw">todos</span>.<span class="fu">last</span>() );

    ok( <span class="kw">removeModelCallback</span>.<span class="fu">called</span> );
});</code></pre><h3 id="views">Views</h3><p>For our views we want to ensure:</p><ul><li>They are being correctly tied to a DOM element when created</li><li>They can render, after which the DOM representation of the view should be visible</li><li>They support wiring up view methods to DOM elements</li></ul><p>One could also take this further and test that user interactions with the view correctly result in any models that need to be changed being updated correctly.</p><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;About Backbone.View&#39;</span>, {
    <span class="dt">setup</span>: <span class="kw">function</span>() {
        $(<span class="ch">&#39;body&#39;</span>).<span class="fu">append</span>(<span class="ch">&#39;&lt;ul id=&quot;todoList&quot;&gt;&lt;/ul&gt;&#39;</span>);
        <span class="kw">this</span>.<span class="fu">todoView</span> = <span class="kw">new</span> TodoView({ <span class="dt">model</span>: <span class="kw">new</span> Todo() });
    },
    <span class="dt">teardown</span>: <span class="kw">function</span>() {
        <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">remove</span>();
        $(<span class="ch">&#39;#todoList&#39;</span>).<span class="fu">remove</span>();
    }
});

test(<span class="ch">&#39;Should be tied to a DOM element when created, based off the property provided.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );
    equal( <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">el</span>.<span class="fu">tagName</span>.<span class="fu">toLowerCase</span>(), <span class="ch">&#39;li&#39;</span> );
});

test(<span class="ch">&#39;Is backed by a model instance, which provides the data.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">2</span> );
    notEqual( <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">model</span>, undefined );
    equal( <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">model</span>.<span class="fu">get</span>(<span class="ch">&#39;done&#39;</span>), <span class="kw">false</span> );
});

test(<span class="ch">&#39;Can render, after which the DOM representation of the view will be visible.&#39;</span>, <span class="kw">function</span>() {
   <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">render</span>();

    <span class="co">// Hint: render() just builds the DOM representation of the view, but doesn&#39;t insert it into the DOM.</span>
    <span class="co">//       How would you append it to the ul#todoList? </span>
    <span class="co">//       How do you access the view&#39;s DOM representation?</span>
    <span class="co">//</span>
    <span class="co">// Hint: http://documentcloud.github.com/backbone/#View-el</span>

    $(<span class="ch">&#39;ul#todoList&#39;</span>).<span class="fu">append</span>(<span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">el</span>);
    equal($(<span class="ch">&#39;#todoList&#39;</span>).<span class="fu">find</span>(<span class="ch">&#39;li&#39;</span>).<span class="fu">length</span>, <span class="dv">1</span>);
});

asyncTest(<span class="ch">&#39;Can wire up view methods to DOM elements.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">2</span> );
    <span class="kw">var</span> viewElt;    

    $(<span class="ch">&#39;#todoList&#39;</span>).<span class="fu">append</span>( <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">render</span>().<span class="fu">el</span> );

    setTimeout(<span class="kw">function</span>() {
        viewElt = $(<span class="ch">&#39;#todoList li input.check&#39;</span>).<span class="fu">filter</span>(<span class="ch">&#39;:first&#39;</span>);

        equal(<span class="kw">viewElt</span>.<span class="fu">length</span> &gt; <span class="dv">0</span>, <span class="kw">true</span>);

        <span class="co">// Make sure that QUnit knows we can continue</span>
        start();
    }, <span class="dv">1000</span>, <span class="ch">&#39;Expected DOM Elt to exist&#39;</span>);


    <span class="co">// Hint: How would you trigger the view, via a DOM Event, to toggle the &#39;done&#39; status.</span>
    <span class="co">//       (See todos.js line 70, where the events hash is defined.)</span>
    <span class="co">//</span>
    <span class="co">// Hint: http://api.jquery.com/click</span>

    $(<span class="ch">&#39;#todoList li input.check&#39;</span>).<span class="fu">click</span>();
    expect( <span class="kw">this</span>.<span class="fu">todoView</span>.<span class="fu">model</span>.<span class="fu">get</span>(<span class="ch">&#39;done&#39;</span>), <span class="kw">true</span> );
});</code></pre><h3 id="events">Events</h3><p>For events, we may want to test a few different use cases:</p><ul><li>Extending plain objects to support custom events</li><li>Binding and triggering custom events on objects</li><li>Passing along arguments to callbacks when events are triggered</li><li>Binding a passed context to an event callback</li><li>Removing custom events</li></ul><p>and a few others that will be detailed in our module below:</p><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;About Backbone.Events&#39;</span>, {
    <span class="dt">setup</span>: <span class="kw">function</span>() {
        <span class="kw">this</span>.<span class="fu">obj</span> = {};
        <span class="kw">_</span>.<span class="fu">extend</span>( <span class="kw">this</span>.<span class="fu">obj</span>, <span class="kw">Backbone</span>.<span class="fu">Events</span> );
        <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">unbind</span>(); <span class="co">// remove all custom events before each spec is run.</span>
    }
});

test(<span class="ch">&#39;Can extend JavaScript objects to support custom events.&#39;</span>, <span class="kw">function</span>() {
    expect(<span class="dv">3</span>);

    <span class="kw">var</span> basicObject = {};

    <span class="co">// How would you give basicObject these functions?</span>
    <span class="co">// Hint: http://documentcloud.github.com/backbone/#Events</span>
    <span class="kw">_</span>.<span class="fu">extend</span>( basicObject, <span class="kw">Backbone</span>.<span class="fu">Events</span> );

    equal( <span class="kw">typeof</span> <span class="kw">basicObject</span>.<span class="fu">bind</span>, <span class="ch">&#39;function&#39;</span> );
    equal( <span class="kw">typeof</span> <span class="kw">basicObject</span>.<span class="fu">unbind</span>, <span class="ch">&#39;function&#39;</span> );
    equal( <span class="kw">typeof</span> <span class="kw">basicObject</span>.<span class="fu">trigger</span>, <span class="ch">&#39;function&#39;</span> );
});

test(<span class="ch">&#39;Allows us to bind and trigger custom named events on an object.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> callback = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;basic event&#39;</span>, callback );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;basic event&#39;</span> );

    <span class="co">// How would you cause the callback for this custom event to be called?</span>
    ok( <span class="kw">callback</span>.<span class="fu">called</span> );
});

test(<span class="ch">&#39;Also passes along any arguments to the callback when an event is triggered.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> passedArgs = [];

    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>(<span class="ch">&#39;some event&#39;</span>, <span class="kw">function</span>() {
        <span class="kw">for</span> (<span class="kw">var</span> i = <span class="dv">0</span>; i &lt; <span class="kw">arguments</span>.<span class="fu">length</span>; i++) {
            <span class="kw">passedArgs</span>.<span class="fu">push</span>( arguments[i] );
        }
    });

    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;some event&#39;</span>, <span class="ch">&#39;arg1&#39;</span>, <span class="ch">&#39;arg2&#39;</span> );

    deepEqual( passedArgs, [<span class="ch">&#39;arg1&#39;</span>, <span class="ch">&#39;arg2&#39;</span>] );
});


test(<span class="ch">&#39;Can also bind the passed context to the event callback.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );

    <span class="kw">var</span> foo = { <span class="dt">color</span>: <span class="ch">&#39;blue&#39;</span> };
    <span class="kw">var</span> changeColor = <span class="kw">function</span>() {
        <span class="kw">this</span>.<span class="fu">color</span> = <span class="ch">&#39;red&#39;</span>;
    };

    <span class="co">// How would you get &#39;this.color&#39; to refer to &#39;foo&#39; in the changeColor function?</span>
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;an event&#39;</span>, changeColor, foo );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;an event&#39;</span> );

    equal( <span class="kw">foo</span>.<span class="fu">color</span>, <span class="ch">&#39;red&#39;</span> );
});

test( <span class="st">&quot;Uses &#39;all&#39; as a special event name to capture all events bound to the object.&quot;</span> , <span class="kw">function</span>() {
    expect( <span class="dv">2</span> );

    <span class="kw">var</span> callback = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;all&#39;</span>, callback );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="st">&quot;custom event 1&quot;</span> );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="st">&quot;custom event 2&quot;</span> );

    equal( <span class="kw">callback</span>.<span class="fu">callCount</span>, <span class="dv">2</span> );
    equal( <span class="kw">callback</span>.<span class="fu">getCall</span>(<span class="dv">0</span>).<span class="fu">args</span>[<span class="dv">0</span>], <span class="ch">&#39;custom event 1&#39;</span> );
});

test(<span class="ch">&#39;Also can remove custom events from objects.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">5</span> );

    <span class="kw">var</span> spy1 = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> spy2 = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> spy3 = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;foo&#39;</span>, spy1 );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;bar&#39;</span>, spy1 );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;foo&#39;</span>, spy2 );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">bind</span>( <span class="ch">&#39;foo&#39;</span>, spy3 );

    <span class="co">// How do you unbind just a single callback for the event?</span>
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">unbind</span>( <span class="ch">&#39;foo&#39;</span>, spy1 );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;foo&#39;</span> );

    ok( <span class="kw">spy2</span>.<span class="fu">called</span> );

    <span class="co">// How do you unbind all callbacks tied to the event with a single method</span>
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">unbind</span>( <span class="ch">&#39;foo&#39;</span> );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;foo&#39;</span> );

    ok( <span class="kw">spy2</span>.<span class="fu">callCount</span>, <span class="dv">1</span> );
    ok( <span class="kw">spy2</span>.<span class="fu">calledOnce</span>, <span class="st">&quot;Spy 2 called once&quot;</span> );
    ok( <span class="kw">spy3</span>.<span class="fu">calledOnce</span>, <span class="st">&quot;Spy 3 called once&quot;</span> );

    <span class="co">// How do you unbind all callbacks and events tied to the object with a single method?</span>
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">unbind</span>( <span class="ch">&#39;bar&#39;</span> );
    <span class="kw">this</span>.<span class="fu">obj</span>.<span class="fu">trigger</span>( <span class="ch">&#39;bar&#39;</span> );

    equal( <span class="kw">spy1</span>.<span class="fu">callCount</span>, <span class="dv">0</span> );
});</code></pre><h3 id="app">App</h3><p>It can also be useful to write specs for any application bootstrap you may have in place. For the following module, our setup initiates and appends a TodoApp view and we can test anything from local instances of views being correctly defined to application interactions correctly resulting in changes to instances of local collections.</p><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;About Backbone Applications&#39;</span> , {
    <span class="dt">setup</span>: <span class="kw">function</span>() {
        <span class="kw">Backbone</span>.<span class="fu">localStorageDB</span> = <span class="kw">new</span> Store(<span class="ch">&#39;testTodos&#39;</span>);
        $(<span class="ch">&#39;#qunit-fixture&#39;</span>).<span class="fu">append</span>(<span class="ch">&#39;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#39;</span>);   
        <span class="kw">this</span>.<span class="fu">App</span> = <span class="kw">new</span> TodoApp({ <span class="dt">appendTo</span>: $(<span class="ch">&#39;#app&#39;</span>) });
    },

    <span class="dt">teardown</span>: <span class="kw">function</span>() {
        <span class="kw">this</span>.<span class="fu">App</span>.<span class="fu">todos</span>.<span class="fu">reset</span>();
        $(<span class="ch">&#39;#app&#39;</span>).<span class="fu">remove</span>();
    }
});

test(<span class="ch">&#39;Should bootstrap the application by initializing the Collection.&#39;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">2</span> );

    notEqual( <span class="kw">this</span>.<span class="fu">App</span>.<span class="fu">todos</span>, undefined );
    equal( <span class="kw">this</span>.<span class="fu">App</span>.<span class="fu">todos</span>.<span class="fu">length</span>, <span class="dv">0</span> );
});

test( <span class="ch">&#39;Should bind Collection events to View creation.&#39;</span> , <span class="kw">function</span>() {
      $(<span class="ch">&#39;#new-todo&#39;</span>).<span class="fu">val</span>( <span class="ch">&#39;Foo&#39;</span> );
      $(<span class="ch">&#39;#new-todo&#39;</span>).<span class="fu">trigger</span>(<span class="kw">new</span> $.<span class="fu">Event</span>( <span class="ch">&#39;keypress&#39;</span>, { <span class="dt">keyCode</span>: <span class="dv">13</span> } ));

      equal( <span class="kw">this</span>.<span class="fu">App</span>.<span class="fu">todos</span>.<span class="fu">length</span>, <span class="dv">1</span> );
 });</code></pre><h2 id="further-reading-resources">Further Reading &amp; Resources</h2><p>That's it for this section on testing applications with QUnit and SinonJS. I encourage you to try out the <a href="https://github.com/addyosmani/backbone-koans-qunit">QUnit Backbone.js Koans</a> and see if you can extend some of the examples. For further reading consider looking at some of the additional resources below:</p><ul><li><strong><a href="http://tddjs.com/">Test-driven JavaScript Development (book)</a></strong></li><li><strong><a href="http://sinonjs.org/qunit/">SinonJS/QUnit Adapter</a></strong></li><li><strong><a href="http://cjohansen.no/en/javascript/using_sinon_js_with_qunit">SinonJS and QUnit</a></strong></li><li><strong><a href="http://msdn.microsoft.com/en-us/scriptjunkie/gg749824">Automating JavaScript Testing With QUnit</a></strong></li><li><strong><a href="http://benalman.com/talks/unit-testing-qunit.html">Ben Alman's Unit Testing With QUnit</a></strong></li><li><strong><a href="https://github.com/jc00ke/qunit-backbone">Another QUnit/Backbone.js demo project</a></strong><br /></li><li><strong><a href="http://devblog.supportbee.com/2012/02/10/helpers-for-testing-backbone-js-apps-using-jasmine-and-sinon-js/">SinonJS helpers for Backbone</a></strong></li></ul><h2 id="resources"><a name="resources">Resources</a></h2><p>Whilst we get with Backbone out of the box can be terribly useful, there are some equally beneficial add-ons that can help simplify our development process. These include:</p><ul><li><a href="https://github.com/tbranyen/backbone.layoutmanager">Backbone Layout Manager</a></li><li><a href="https://github.com/tbranyen/backbone-boilerplate">Backbone Boilerplate</a></li><li><a href="https://github.com/derickbailey/backbone.modelbinding">Backbone Model Binding</a></li><li><a href="https://github.com/PaulUithol/Backbone-relational">Backbone Relational - for model relationships</a></li><li><a href="https://gist.github.com/1271041">View and model inheritance</a></li><li><a href="https://github.com/derickbailey/backbone.marionette">Backbone Marionette</a></li><li><a href="https://github.com/janmonschke/backbone-couchdb">Backbone CouchDB</a></li><li><a href="https://github.com/n-time/backbone.validations">Backbone Validations - HTML5 inspired validations</a></li></ul><p>In time, there will be tutorials in the book covering some of these resources but until then, please feel free to check them out.</p><h2 id="conclusions"><a name="conclusions">Conclusions</a></h2><p>That's it for 'Developing Backbone.js Applications'. I hope you found this book both useful, enlightening and a good start for your journey into exploring Backbone.js.</p><p>Remember, If there are other topics or areas of this book you feel could be expanded further, please feel free to let me know, or better yet, send a pull request upstream. I'm always interested in making this title as comprehensive as possible.</p><p>Until next time, the very best of luck with the rest of your journey!</p><hr /><p>Copyright Addy Osmani, 2012.</p>
</body>
</html>

