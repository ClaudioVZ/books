<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SinonJS</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h1>SinonJS</h1>
<p>Similar to the section on testing Backbone.js apps using the Jasmine BDD framework, we're nearly ready to take what we've learned and write a number of QUnit tests for our Todo application.</p><p>Before we start though, you may have noticed that QUnit doesn't support test spies. Test spies are functions which record arguments, exceptions and return values for any of their calls. They're typically used to test callbacks and how functions may be used in the application being tested. In testing frameworks, spies can usually be either anonymous functions or wrap functions which already exist.</p><h2 id="what-is-sinonjs">What is SinonJS?</h2><p>In order for us to substitute support for spies in QUnit, we will be taking advantage of a mocking framework called <a href="http://sinonjs.org/">SinonJS</a> by Christian Johansen. We will also be using the <a href="http://sinonjs.org/qunit/">SinonJS-QUnit adapter</a> which provides seamless integration with QUnit (meaning setup is minimal). Sinon.JS is completely test-framework agnostic and should be easy to use with any testing framework, so it's ideal for our needs.</p><p>The framework supports three features we'll be taking advantage of for unit testing our application:</p><ul><li><strong>Anonymous spies</strong></li><li><strong>Spying on existing methods</strong></li><li><strong>A rich inspection interface</strong></li></ul><p>Using <code>this.spy()</code> without any arguments creates an anonymous spy. This is comparable to <code>jasmine.createSpy()</code> and we can observe basic usage of a SinonJS spy in the following example:</p><h4 id="basic-spies">Basic Spies:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;should call all subscribers for a message exactly once&quot;</span>, <span class="kw">function</span> () {
    <span class="kw">var</span> message = getUniqueString();
    <span class="kw">var</span> spy = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( message, spy );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( message, <span class="st">&quot;Hello World&quot;</span> );

    ok( <span class="kw">spy1</span>.<span class="fu">calledOnce</span>, <span class="st">&quot;the subscriber was called once&quot;</span> );
});</code></pre><p>We can also use <code>this.spy()</code> to spy on existing functions (like jQuery's <code>$.ajax</code>) in the example below. When spying on a function which already exists, the function behaves normally but we get access to data about its calls which can be very useful for testing purposes.</p><h4 id="spying-on-existing-functions">Spying On Existing Functions:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;should inspect jQuery.getJSON&#39;s usage of jQuery.ajax&quot;</span>, <span class="kw">function</span> () {
    <span class="kw">this</span>.<span class="fu">spy</span>( jQuery, <span class="st">&quot;ajax&quot;</span> );

    <span class="kw">jQuery</span>.<span class="fu">getJSON</span>( <span class="st">&quot;/todos/completed&quot;</span> );

    ok( <span class="kw">jQuery.ajax</span>.<span class="fu">calledOnce</span> );
    equals( <span class="kw">jQuery.ajax</span>.<span class="fu">getCall</span>(<span class="dv">0</span>).<span class="fu">args</span>[<span class="dv">0</span>].<span class="fu">url</span>, <span class="st">&quot;/todos/completed&quot;</span> );
    equals( <span class="kw">jQuery.ajax</span>.<span class="fu">getCall</span>(<span class="dv">0</span>).<span class="fu">args</span>[<span class="dv">0</span>].<span class="fu">dataType</span>, <span class="st">&quot;json&quot;</span> );
});</code></pre><p>SinonJS comes with a rich spy interface which callows us to test whether a spy was called with a specific argument, if it was called a specific number of times and test against the values of arguments. A complete list of features supported in the interface can be found here (http://sinonjs.org/docs/), but let's take a look at some examples demonstrating some of the most commonly used ones:</p><h4 id="matching-arguments-test-a-spy-was-called-with-a-specific-set-of-arguments">Matching arguments: test a spy was called with a specific set of arguments:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;Should call a subscriber with standard matching&quot;</span>: <span class="kw">function</span> () {
    <span class="kw">var</span> spy = <span class="kw">sinon</span>.<span class="fu">spy</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;message&quot;</span>, spy );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;message&quot;</span>, { <span class="dt">id</span>: <span class="dv">45</span> } );

    assertTrue( <span class="kw">spy</span>.<span class="fu">calledWith</span>( { <span class="dt">id</span>: <span class="dv">45</span> } ) );
});</code></pre><h4 id="stricter-argument-matching-test-a-spy-was-called-at-least-once-with-specific-arguments-and-no-others">Stricter argument matching: test a spy was called at least once with specific arguments and no others:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;Should call a subscriber with strict matching&quot;</span>: <span class="kw">function</span> () {
    <span class="kw">var</span> spy = <span class="kw">sinon</span>.<span class="fu">spy</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;message&quot;</span>, spy );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;message&quot;</span>, <span class="st">&quot;many&quot;</span>, <span class="st">&quot;arguments&quot;</span> );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;message&quot;</span>, <span class="dv">12</span>, <span class="dv">34</span> );

    <span class="co">// This passes</span>
    assertTrue( <span class="kw">spy</span>.<span class="fu">calledWith</span>(<span class="st">&quot;many&quot;</span>) );     

    <span class="co">// This however, fails   </span>
    assertTrue( <span class="kw">spy</span>.<span class="fu">calledWithExactly</span>( <span class="st">&quot;many&quot;</span> ) ); 
});</code></pre><h4 id="testing-call-order-testing-if-a-spy-was-called-before-or-after-another-spy">Testing call order: testing if a spy was called before or after another spy:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;Should call a subscriber and maintain call order&quot;</span>: <span class="kw">function</span> () {
    <span class="kw">var</span> a = <span class="kw">sinon</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> b = <span class="kw">sinon</span>.<span class="fu">spy</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;message&quot;</span>, a );
    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;event&quot;</span>, b );

    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;message&quot;</span>, { <span class="dt">id</span>: <span class="dv">45</span> } );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;event&quot;</span>, [<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>] );

    assertTrue( <span class="kw">a</span>.<span class="fu">calledBefore</span>(b) );
    assertTrue( <span class="kw">b</span>.<span class="fu">calledAfter</span>(a) );
});</code></pre><h4 id="match-execution-counts-test-a-spy-was-called-a-specific-number-of-times">Match execution counts: test a spy was called a specific number of times:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;Should call a subscriber and check call counts&quot;</span>, <span class="kw">function</span> () {
    <span class="kw">var</span> message = getUniqueString();
    <span class="kw">var</span> spy = <span class="kw">this</span>.<span class="fu">spy</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( message, spy );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( message, <span class="st">&quot;some payload&quot;</span> );


    <span class="co">// Passes if spy was called once and only once.</span>
    ok( <span class="kw">spy</span>.<span class="fu">calledOnce</span> ); <span class="co">// calledTwice and calledThrice are also supported</span>

    <span class="co">// The number of recorded calls.</span>
    equal( <span class="kw">spy</span>.<span class="fu">callCount</span>, <span class="dv">1</span> );

    <span class="co">// Directly checking the arguments of the call</span>
    equals( <span class="kw">spy</span>.<span class="fu">getCall</span>(<span class="dv">0</span>).<span class="fu">args</span>[<span class="dv">0</span>], message );
});</code></pre><h2 id="stubs-and-mocks">Stubs and mocks</h2><p>SinonJS also supports two other powerful features which are useful to be aware of: stubs and mocks. Both stubs and mocks implement all of the features of the spy API, but have some added functionality.</p><h3 id="stubs">Stubs</h3><p>A stub allows us to replace any existing behaviour for a specific method with something else. They can be very useful for simulating exceptions and are most often used to write test cases when certain dependencies of your code-base may not yet be written.</p><p>Let us briefly re-explore our Backbone Todo application, which contained a Todo model and a TodoList collection. For the purpose of this walkthrough, we want to isolate our TodoList collection and fake the Todo model to test how adding new models might behave.</p><p>We can pretend that the models have yet to be written just to demonstrate how stubbing might be carried out. A shell collection just containing a reference to the model to be used might look like this:</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">var</span> TodoList = <span class="kw">Backbone.Collection</span>.<span class="fu">extend</span>({
    <span class="dt">model</span>: Todo
});

<span class="co">// Let&#39;s assume our instance of this collection is</span>
<span class="kw">this</span>.<span class="fu">todoList</span>;</code></pre><p>Assuming our collection is instantiating new models itself, it's necessary for us to stub the models constructor function for the the test. This can be done by creating a simple stub as follows:</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">this</span>.<span class="fu">todoStub</span> = <span class="kw">sinon</span>.<span class="fu">stub</span>( <span class="kw">window</span>, <span class="st">&quot;Todo&quot;</span> );</code></pre><p>The above creates a stub of the Todo method on the window object. When stubbing a persistent object, it's necessary to restore it to its original state. This can be done in a <code>teardown()</code> as follows:</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">this</span>.<span class="fu">todoStub</span>.<span class="fu">restore</span>();</code></pre><p>After this, we need to alter what the constructor returns, which can be efficiently done using a plain <code>Backbone.Model</code> constructor. Whilst this isn't a Todo model, it does still provide us an actual Backbone model.</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="dt">teardown</span>: <span class="kw">function</span>() {
    <span class="kw">this</span>.<span class="fu">todoStub</span> = <span class="kw">sinon</span>.<span class="fu">stub</span>( <span class="kw">window</span>, <span class="st">&quot;Todo&quot;</span> );
    <span class="kw">this</span>.<span class="fu">model</span> = <span class="kw">new</span> <span class="kw">Backbone</span>.<span class="fu">Model</span>({
      <span class="dt">id</span>: <span class="dv">2</span>, 
      <span class="dt">title</span>: <span class="st">&quot;Hello world&quot;</span>
    });
    <span class="kw">this</span>.<span class="fu">todoStub</span>.<span class="fu">returns</span>( <span class="kw">this</span>.<span class="fu">model</span> );
});</code></pre><p>The expectation here might be that this snippet would ensure our TodoList collection always instantiates a stubbed Todo model, but because a reference to the model in the collection is already present, we need to reset the model property of our collection as follows:</p><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">this</span>.<span class="fu">todoList</span>.<span class="fu">model</span> = Todo;</code></pre><p>The result of this is that when our TodoList collection instantiates new Todo models, it will return our plain Backbone model instance as desired. This allows us to write a spec for testing the addition of new model literals as follows:</p><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="st">&quot;Should function when instantiated with model literals&quot;</span>, {

  <span class="dt">setup</span>:<span class="kw">function</span>() {

    <span class="kw">this</span>.<span class="fu">todoStub</span> = <span class="kw">sinon</span>.<span class="fu">stub</span>(<span class="kw">window</span>, <span class="st">&quot;Todo&quot;</span>);
    <span class="kw">this</span>.<span class="fu">model</span> = <span class="kw">new</span> <span class="kw">Backbone</span>.<span class="fu">Model</span>({
      <span class="dt">id</span>: <span class="dv">2</span>, 
      <span class="dt">title</span>: <span class="st">&quot;Hello world&quot;</span>
    });

    <span class="kw">this</span>.<span class="fu">todoStub</span>.<span class="fu">returns</span>(<span class="kw">this</span>.<span class="fu">model</span>);
    <span class="kw">this</span>.<span class="fu">todos</span> = <span class="kw">new</span> TodoList();

    <span class="co">// Let&#39;s reset the relationship to use a stub</span>
    <span class="kw">this</span>.<span class="fu">todos</span>.<span class="fu">model</span> = Todo; 
    <span class="kw">this</span>.<span class="fu">todos</span>.<span class="fu">add</span>({
      <span class="dt">id</span>: <span class="dv">2</span>, 
      <span class="dt">title</span>: <span class="st">&quot;Hello world&quot;</span>
    });
  },

  <span class="dt">teardown</span>: <span class="kw">function</span>() {
    <span class="kw">this</span>.<span class="fu">todoStub</span>.<span class="fu">restore</span>();
  }

});

test(<span class="st">&quot;should add a model&quot;</span>, <span class="kw">function</span>() {
    equal( <span class="kw">this</span>.<span class="fu">todos</span>.<span class="fu">length</span>, <span class="dv">1</span> );
});

test(<span class="st">&quot;should find a model by id&quot;</span>, <span class="kw">function</span>() {
    equal( <span class="kw">this</span>.<span class="fu">todos</span>.<span class="fu">get</span>(<span class="dv">5</span>).<span class="fu">get</span>(<span class="st">&quot;id&quot;</span>), <span class="dv">5</span> );
  });
});</code></pre><h3 id="mocks">Mocks</h3><p>Mocks are effectively the same as stubs, however they mock a complete API out and have some built-in expectations for how they should be used. The difference between a mock and a spy is that as the expectations for their use are pre-defined, it will fail if any of these are not met.</p><p>Here's a snippet with sample usage of a mock based on PubSubJS. Here, we have a <code>clearTodo()</code> method as a callback and use mocks to verify its behavior.</p><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;should call all subscribers when exceptions&quot;</span>, <span class="kw">function</span> () {
    <span class="kw">var</span> myAPI = { <span class="dt">clearTodo</span>: <span class="kw">function</span> () {} };

    <span class="kw">var</span> spy = <span class="kw">this</span>.<span class="fu">spy</span>();
    <span class="kw">var</span> mock = <span class="kw">this</span>.<span class="fu">mock</span>( myAPI );
    <span class="kw">mock</span>.<span class="fu">expects</span>( <span class="st">&quot;clearTodo&quot;</span> ).<span class="fu">once</span>().<span class="fu">throws</span>();

    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;message&quot;</span>, <span class="kw">myAPI</span>.<span class="fu">clearTodo</span> );
    <span class="kw">PubSub</span>.<span class="fu">subscribe</span>( <span class="st">&quot;message&quot;</span>, spy );
    <span class="kw">PubSub</span>.<span class="fu">publishSync</span>( <span class="st">&quot;message&quot;</span>, undefined );

    <span class="kw">mock</span>.<span class="fu">verify</span>();
    ok( <span class="kw">spy</span>.<span class="fu">calledOnce</span> );
});</code></pre>
</body>
</html>

