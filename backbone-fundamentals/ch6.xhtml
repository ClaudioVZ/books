<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>QUnit</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
</head>
<body>
<h1>QUnit</h1>
<h2 id="getting-setup">Getting Setup</h2><p>Luckily, getting QUnit setup is a fairly straight-forward process that will take less than 5 minutes.</p><p>We first setup a testing environment composed of three files:</p><ul><li>A HTML <strong>structure</strong> for displaying test results,</li><li>The <strong>qunit.js</strong> file composing the testing framework and,</li><li>The <strong>qunit.css</strong> file for styling test results.</li></ul><p>The latter two of these can be downloaded from the <a href="http://qunitjs.com">QUnit website</a>.</p><p>If you would prefer, you can use a hosted version of the QUnit source files for testing purposes. The hosted URLs can be found at [http://github.com/jquery/qunit/raw/master/qunit/].</p><h4 id="sample-html-with-qunit-compatible-markup">Sample HTML with QUnit-compatible markup:</h4><pre class="sourceCode html"><code class="sourceCode html"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span>  
<span class="kw">&lt;html&gt;</span>  
<span class="kw">&lt;head&gt;</span>  
    <span class="kw">&lt;title&gt;</span>QUnit Test Suite<span class="kw">&lt;/title&gt;</span>  

     <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> href=</span><span class="st">&quot;qunit.css&quot;</span><span class="kw">&gt;</span>  
     <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;qunit.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>  

     <span class="co">&lt;!-- Your application --&gt;</span>  
     <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;app.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>  

     <span class="co">&lt;!-- Your tests --&gt;</span>  
     <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;tests.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>   
<span class="kw">&lt;/head&gt;</span>  
<span class="kw">&lt;body&gt;</span>  
    <span class="kw">&lt;h1</span><span class="ot"> id=</span><span class="st">&quot;qunit-header&quot;</span><span class="kw">&gt;</span>QUnit Test Suite<span class="kw">&lt;/h1&gt;</span>  
    <span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;qunit-banner&quot;</span><span class="kw">&gt;&lt;/h2&gt;</span>  
    <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;qunit-testrunner-toolbar&quot;</span><span class="kw">&gt;&lt;/div&gt;</span>  
    <span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;qunit-userAgent&quot;</span><span class="kw">&gt;&lt;/h2&gt;</span>  
    <span class="kw">&lt;ol</span><span class="ot"> id=</span><span class="st">&quot;qunit-tests&quot;</span><span class="kw">&gt;</span>test markup, hidden.<span class="kw">&lt;/ol&gt;</span>  
<span class="kw">&lt;/body&gt;</span>  
<span class="kw">&lt;/html&gt;</span>  </code></pre><p>Let's go through the elements above with qunit mentioned in their ID. When QUnit is running:</p><ul><li><strong>qunit-header</strong> shows the name of the test suite</li><li><strong>qunit-banner</strong> shows up as red if a test fails and green if all tests pass</li><li><strong>qunit-testrunner-toolbar</strong> contains additional options for configuring the display of tests</li><li><strong>qunit-userAgent</strong> displays the navigator.userAgent property</li><li><strong>qunit-tests</strong> is a container for our test results</li></ul><p>When running correctly, the above test runner looks as follows:</p><div class="figure"><img src="images/img0.png" alt="screenshot 1" /><p class="caption">screenshot 1</p></div><p>The numbers of the form (a, b, c) after each test name correspond to a) failed asserts, b) passed asserts and c) total asserts. Clicking on a test name expands it to display all of the assertions for that test case. Assertions in green have successfully passed.</p><div class="figure"><img src="images/img1.png" alt="screenshot 2" /><p class="caption">screenshot 2</p></div><p>If however any tests fail, the test gets highlighted (and the qunit-banner at the top switches to red):</p><div class="figure"><img src="images/img2.png" alt="screenshot 3" /><p class="caption">screenshot 3</p></div><h2 id="assertions">Assertions</h2><p>QUnit supports a number of basic <strong>assertions</strong>, which are used in testing to verify that the result being returned by our code is what we expect. If an assertion fails, we know that a bug exists.Similar to Jasmine, QUnit can be used to easily test for regressions. Specifically, when a bug is found one can write an assertion to test the existence of the bug, write a patch and then commit both. If subsequent changes to the code break the test you'll know what was responsible and be able to address it more easily.</p><p>Some of the supported QUnit assertions we're going to look at first are:</p><ul><li><code>ok ( state, message )</code> - passes if the first argument is truthy</li><li><code>equal ( actual, expected, message )</code> - a simple comparison assertion with type coercion</li><li><code>notEqual ( actual, expected, message )</code> - the opposite of the above</li><li><code>expect( amount )</code> - the number of assertions expected to run within each test</li><li><code>strictEqual( actual, expected, message)</code> - offers a much stricter comparison than <code>equal()</code> and is considered the preferred method of checking equality as it avoids stumbling on subtle coercion bugs</li><li><code>deepEqual( actual, expected, message )</code> - similar to <code>strictEqual</code>, comparing the contents (with <code>===</code>) of the given objects, arrays and primitives.</li></ul><p>Creating new test cases with QUnit is relatively straight-forward and can be done using <code>test()</code>, which constructs a test where the first argument is the <code>name</code> of the test to be displayed in our results and the second is a <code>callback</code> function containing all of our assertions. This is called as soon as QUnit is running.</p><h4 id="basic-test-case-using-test-name-callback">Basic test case using test( name, callback ):</h4><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">var</span> myString = <span class="ch">&#39;Hello Backbone.js&#39;</span>;

test( <span class="ch">&#39;Our first QUnit test - asserting results&#39;</span>, <span class="kw">function</span>(){

    <span class="co">// ok( boolean, message )</span>
    ok( <span class="kw">true</span>, <span class="ch">&#39;the test succeeds&#39;</span>);
    ok( <span class="kw">false</span>, <span class="ch">&#39;the test fails&#39;</span>);

    <span class="co">// equal( actualValue, expectedValue, message )</span>
    equal( myString, <span class="ch">&#39;Hello Backbone.js&#39;</span>, <span class="ch">&#39;The value expected is Hello Backbone.js!&#39;</span>);
});</code></pre><p>What we're doing in the above is defining a variable with a specific value and then testing to ensure the value was what we expected it to be. This was done using the comparison assertion, <code>equal()</code>, which expects its first argument to be a value being tested and the second argument to be the expected value. We also used <code>ok()</code>, which allows us to easily test against functions or variables that evaluate to booleans.</p><p>Note: Optionally in our test case, we could have passed an 'expected' value to <code>test()</code> defining the number of assertions we expect to run. This takes the form: <code>test( name, [expected], test );</code> or by manually settings the expectation at the top of the test function, like so: <code>expect( 1 )</code>. I recommend you to make it a habit and always define how many assertions you expect. More on this later.</p><p>As testing a simple static variable is fairly trivial, we can take this further to test actual functions. In the following example we test the output of a function that reverses a string to ensure that the output is correct using <code>equal()</code> and <code>notEqual()</code>:</p><h4 id="comparing-the-actual-output-of-a-function-against-the-expected-output">Comparing the actual output of a function against the expected output:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">function</span> reverseString( str ){
    <span class="kw">return</span> <span class="kw">str</span>.<span class="fu">split</span>(<span class="st">&quot;&quot;</span>).<span class="fu">reverse</span>().<span class="fu">join</span>(<span class="st">&quot;&quot;</span>);
}

test( <span class="ch">&#39;reverseString()&#39;</span>, <span class="kw">function</span>() { 
    expect( <span class="dv">5</span> );
    equal( reverseString(<span class="ch">&#39;hello&#39;</span>), <span class="ch">&#39;olleh&#39;</span>, <span class="ch">&#39;The value expected was olleh&#39;</span> ); 
    equal( reverseString(<span class="ch">&#39;foobar&#39;</span>), <span class="ch">&#39;raboof&#39;</span>, <span class="ch">&#39;The value expected was raboof&#39;</span> ); 
    equal( reverseString(<span class="ch">&#39;world&#39;</span>), <span class="ch">&#39;dlrow&#39;</span>, <span class="ch">&#39;The value expected was dlrow&#39;</span> ); 
    notEqual( reverseString(<span class="ch">&#39;world&#39;</span>), <span class="ch">&#39;dlroo&#39;</span>, <span class="ch">&#39;The value was expected to not be dlroo&#39;</span> ); 
    equal( reverseString(<span class="ch">&#39;bubble&#39;</span>), <span class="ch">&#39;double&#39;</span>, <span class="ch">&#39;The value expected was elbbub&#39;</span> ); 
})  </code></pre><p>Running these tests in the QUnit test runner (which you would see when your HTML test page was loaded) we would find that four of the assertions pass whilst the last one does not. The reason the test against <code>'double'</code> fails is because it was purposefully written incorrectly. In your own projects if a test fails to pass and your assertions are correct, you've probably just found a bug!</p><h2 id="adding-structure-to-assertions">Adding structure to assertions</h2><p>Housing all of our assertions in one test case can quickly become difficult to maintain, but luckily QUnit supports structuring blocks of assertions more cleanly. This can be done using <code>module()</code> - a method that allows us to easily group tests together. A typical approach to grouping might be keeping multiple tests testing a specific method as part of the same group (module).</p><h4 id="basic-qunit-modules">Basic QUnit Modules:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="ch">&#39;Module One&#39;</span> );  
test( <span class="ch">&#39;first test&#39;</span>, <span class="kw">function</span>() {} );  
test( <span class="ch">&#39;another test&#39;</span>, <span class="kw">function</span>() {} );  

module( <span class="ch">&#39;Module Two&#39;</span> );  
test( <span class="ch">&#39;second test&#39;</span>, <span class="kw">function</span>() {} );  
test( <span class="ch">&#39;another test&#39;</span>, <span class="kw">function</span>() {} );  

module( <span class="ch">&#39;Module Three&#39;</span> );  
test( <span class="ch">&#39;third test&#39;</span>, <span class="kw">function</span>() {} );  
test( <span class="ch">&#39;another test&#39;</span>, <span class="kw">function</span>() {} );  </code></pre><p>We can take this further by introducing <code>setup()</code> and <code>teardown()</code> callbacks to our modules, where <code>setup()</code> is run before each test whilst <code>teardown()</code> is run after each test.</p><h4 id="using-setup-and-teardown">Using setup() and teardown() :</h4><pre class="sourceCode javascript"><code class="sourceCode javascript">module( <span class="st">&quot;Module One&quot;</span>, {
    <span class="dt">setup</span>: <span class="kw">function</span>() {
        <span class="co">// run before</span>
    },
    <span class="dt">teardown</span>: <span class="kw">function</span>() {
        <span class="co">// run after</span>
    }
});

test(<span class="st">&quot;first test&quot;</span>, <span class="kw">function</span>() {
    <span class="co">// run the first test</span>
});</code></pre><p>These callbacks can be used to define (or clear) any components we wish to instantiate for use in one or more of our tests. As we'll see shortly, this is ideal for defining new instances of views, collections, models or routers from a project that we can then reference across multiple tests.</p><h4 id="using-setup-and-teardown-for-instantiation-and-clean-up">Using setup() and teardown() for instantiation and clean-up:</h4><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="co">// Define a simple model and collection modeling a store and</span>
<span class="co">// list of stores</span>

<span class="kw">var</span> Store = <span class="kw">Backbone.Model</span>.<span class="fu">extend</span>({});

<span class="kw">var</span> StoreList = <span class="kw">Backbone.Collection</span>.<span class="fu">extend</span>({
    <span class="dt">model</span>: store,
    <span class="dt">comparator</span>: <span class="kw">function</span>( store ) { <span class="kw">return</span> <span class="kw">store</span>.<span class="fu">get</span>(<span class="ch">&#39;name&#39;</span>) }
});

<span class="co">// Define a group for our tests</span>
module( <span class="st">&quot;StoreList sanity check&quot;</span>, {
    <span class="dt">setup</span>: <span class="kw">function</span>() {
        <span class="kw">this</span>.<span class="fu">list</span> = <span class="kw">new</span> StoreList;
        <span class="kw">this</span>.<span class="fu">list</span>.<span class="fu">add</span>(<span class="kw">new</span> Store({ <span class="dt">name</span>: <span class="st">&quot;Costcutter&quot;</span> }));
        <span class="kw">this</span>.<span class="fu">list</span>.<span class="fu">add</span>(<span class="kw">new</span> Store({ <span class="dt">name</span>: <span class="st">&quot;Target&quot;</span> }));
        <span class="kw">this</span>.<span class="fu">list</span>.<span class="fu">add</span>(<span class="kw">new</span> Store({ <span class="dt">name</span>: <span class="st">&quot;Walmart&quot;</span> }));
        <span class="kw">this</span>.<span class="fu">list</span>.<span class="fu">add</span>(<span class="kw">new</span> Store({ <span class="dt">name</span>: <span class="st">&quot;Barnes &amp; Noble&quot;</span> });
    },
    <span class="dt">teardown</span>: <span class="kw">function</span>() {
        <span class="kw">window</span>.<span class="fu">errors</span> = null;
    }
});

<span class="co">// Test the order of items added</span>
test( <span class="st">&quot;test ordering&quot;</span>, <span class="kw">function</span>() {
    expect( <span class="dv">1</span> );
    <span class="kw">var</span> expected = [<span class="st">&quot;Barnes &amp; Noble&quot;</span>, <span class="st">&quot;Costcutter&quot;</span>, <span class="st">&quot;Target&quot;</span>, <span class="st">&quot;Walmart&quot;</span>];
    <span class="kw">var</span> actual = <span class="kw">this</span>.<span class="fu">list</span>.<span class="fu">pluck</span>(<span class="st">&quot;name&quot;</span>);
    deepEqual( actual, expected, <span class="st">&quot;is maintained by comparator&quot;</span> );
});</code></pre><p>Here, a list of stores is created and stored on <code>setup()</code>. A <code>teardown()</code> callback is used to simply clear our a list of errors we might be storing within the window scope, but is otherwise not needed.</p><h2 id="assertion-examples">Assertion examples</h2><p>Before we continue any further, let's review some more examples of how QUnits various assertions can be correctly used when writing tests:</p><h3 id="equal---a-comparison-assertion.-it-passes-if-actual-expected">equal - a comparison assertion. It passes if actual == expected</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;equal&quot;</span>, <span class="dv">2</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = <span class="dv">6</span> - <span class="dv">5</span>;
  equal( actual, <span class="kw">true</span>,  <span class="st">&quot;passes as 1 == true&quot;</span> );
  equal( actual, <span class="dv">1</span>,     <span class="st">&quot;passes as 1 == 1&quot;</span> );
});</code></pre><h3 id="notequal---a-comparison-assertion.-it-passes-if-actual-expected">notEqual - a comparison assertion. It passes if actual != expected</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;notEqual&quot;</span>, <span class="dv">2</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = <span class="dv">6</span> - <span class="dv">5</span>;
  notEqual( actual, <span class="kw">false</span>, <span class="st">&quot;passes as 1 != false&quot;</span> );
  notEqual( actual, <span class="dv">0</span>,     <span class="st">&quot;passes as 1 != 0&quot;</span> );
});</code></pre><h3 id="strictequal---a-comparison-assertion.-it-passes-if-actual-expected.">strictEqual - a comparison assertion. It passes if actual === expected.</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test( <span class="st">&quot;strictEqual&quot;</span>, <span class="dv">2</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = <span class="dv">6</span> - <span class="dv">5</span>;
  strictEqual( actual, <span class="kw">true</span>,  <span class="st">&quot;fails as 1 !== true&quot;</span> );
  strictEqual( actual, <span class="dv">1</span>,     <span class="st">&quot;passes as 1 === 1&quot;</span> );
});</code></pre><h3 id="notstrictequal---a-comparison-assertion.-it-passes-if-actual-expected.">notStrictEqual - a comparison assertion. It passes if actual !== expected.</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;notStrictEqual&quot;</span>, <span class="dv">2</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = <span class="dv">6</span> - <span class="dv">5</span>;
  notStrictEqual( actual, <span class="kw">true</span>,  <span class="st">&quot;passes as 1 !== true&quot;</span> );
  notStrictEqual( actual, <span class="dv">1</span>,     <span class="st">&quot;fails as 1 === 1&quot;</span> );
});</code></pre><h3 id="deepequal---a-recursive-comparison-assertion.-unlike-strictequal-it-works-on-objects-arrays-and-primitives.">deepEqual - a recursive comparison assertion. Unlike strictEqual(), it works on objects, arrays and primitives.</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;deepEqual&quot;</span>, <span class="dv">4</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>};
  <span class="kw">var</span> el =  $(<span class="ch">&#39;div&#39;</span>);
  <span class="kw">var</span> children = $(<span class="ch">&#39;div&#39;</span>).<span class="fu">children</span>();

  equal( actual, {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>},   <span class="st">&quot;fails - objects are not equal using equal()&quot;</span> );
  deepEqual( actual, {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>},   <span class="st">&quot;passes - objects are equal&quot;</span> );
  equal( el, children, <span class="st">&quot;fails - jQuery objects are not the same&quot;</span> );
  deepEqual(el, children, <span class="st">&quot;fails - objects not equivalent&quot;</span> );

});</code></pre><h3 id="notdeepequal---a-comparison-assertion.-this-returns-the-opposite-of-deepequal">notDeepEqual - a comparison assertion. This returns the opposite of deepEqual</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;notDeepEqual&quot;</span>, <span class="dv">2</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> actual = {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>};
  notEqual( actual, {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>},   <span class="st">&quot;passes - objects are not equal&quot;</span> );
  notDeepEqual( actual, {<span class="dt">q</span>: <span class="ch">&#39;foo&#39;</span>, <span class="dt">t</span>: <span class="ch">&#39;bar&#39;</span>},   <span class="st">&quot;fails - objects are equivalent&quot;</span> );
});</code></pre><h3 id="raises---an-assertion-which-tests-if-a-callback-throws-any-exceptions">raises - an assertion which tests if a callback throws any exceptions</h3><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;raises&quot;</span>, <span class="dv">1</span>, <span class="kw">function</span>() {
  raises(<span class="kw">function</span>() {
    <span class="kw">throw</span> <span class="kw">new</span> Error( <span class="st">&quot;Oh no! It&#39;s an error!&quot;</span> );
  }, <span class="st">&quot;passes - an error was thrown inside our callback&quot;</span>);
});</code></pre><h2 id="fixtures">Fixtures</h2><p>From time to time we may need to write tests that modify the DOM. Managing the clean-up of such operations between tests can be a genuine pain, but thankfully QUnit has a solution to this problem in the form of the <code>#qunit-fixture</code> element, seen below.</p><h4 id="fixture-markup">Fixture markup:</h4><pre class="sourceCode html"><code class="sourceCode html"><span class="dt">&lt;!DOCTYPE </span>html<span class="dt">&gt;</span>
<span class="kw">&lt;html&gt;</span>
<span class="kw">&lt;head&gt;</span>
    <span class="kw">&lt;title&gt;</span>QUnit Test<span class="kw">&lt;/title&gt;</span>
    <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> href=</span><span class="st">&quot;qunit.css&quot;</span><span class="kw">&gt;</span>
    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;qunit.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>
    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;app.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>
    <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;tests.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span>
<span class="kw">&lt;/head&gt;</span>
<span class="kw">&lt;body&gt;</span>
    <span class="kw">&lt;h1</span><span class="ot"> id=</span><span class="st">&quot;qunit-header&quot;</span><span class="kw">&gt;</span>QUnit Test<span class="kw">&lt;/h1&gt;</span>
    <span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;qunit-banner&quot;</span><span class="kw">&gt;&lt;/h2&gt;</span>
    <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;qunit-testrunner-toolbar&quot;</span><span class="kw">&gt;&lt;/div&gt;</span>
    <span class="kw">&lt;h2</span><span class="ot"> id=</span><span class="st">&quot;qunit-userAgent&quot;</span><span class="kw">&gt;&lt;/h2&gt;</span>
    <span class="kw">&lt;ol</span><span class="ot"> id=</span><span class="st">&quot;qunit-tests&quot;</span><span class="kw">&gt;&lt;/ol&gt;</span>
    <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;qunit-fixture&quot;</span><span class="kw">&gt;&lt;/div&gt;</span>
<span class="kw">&lt;/body&gt;</span>
<span class="kw">&lt;/html&gt;</span></code></pre><p>We can either opt to place static markup in the fixture or just insert/append any DOM elements we may need to it. QUnit will automatically reset the <code>innerHTML</code> of the fixture after each test to its original value. In case you're using jQuery, it's useful to know that QUnit checks for its availability and will opt to use <code>$(el).html()</code> instead, which will cleanup any jQuery event handlers too.</p><h3 id="fixtures-example">Fixtures example:</h3><p>Let us now go through a more complete example of using fixtures. One thing that most of us are used to doing in jQuery is working with lists - they're often used to define the markup for menus, grids and a number of other components. You may have used jQuery plugins before that manipulated a given list in a particular way and it can be useful to test that the final (manipulated) output of the plugin is what was expected.</p><p>For the purposes of our next example, we're going to use Ben Alman's <code>$.enumerate()</code> plugin, which can prepend each item in a list by its index, optionally allowing us to set what the first number in the list is. The code snippet for the plugin can be found below, followed by an example of the output is generates:</p><pre class="sourceCode javascript"><code class="sourceCode javascript">$.<span class="fu">fn</span>.<span class="fu">enumerate</span> = <span class="kw">function</span>( start ) {
      <span class="kw">if</span> ( <span class="kw">typeof</span> start !== <span class="st">&quot;undefined&quot;</span> ) {
        <span class="co">// Since `start` value was provided, enumerate and return</span>
        <span class="co">// the initial jQuery object to allow chaining.</span>

        <span class="kw">return</span> <span class="kw">this</span>.<span class="fu">each</span>(<span class="kw">function</span>(i){
          $(<span class="kw">this</span>).<span class="fu">prepend</span>( <span class="st">&quot;&lt;b&gt;&quot;</span> + ( i + start ) + <span class="st">&quot;&lt;/b&gt; &quot;</span> );
        });

      } <span class="kw">else</span> {
        <span class="co">// Since no `start` value was provided, function as a</span>
        <span class="co">// getter, returing the appropriate value from the first</span>
        <span class="co">// selected element.</span>

        <span class="kw">var</span> val = <span class="kw">this</span>.<span class="fu">eq</span>( <span class="dv">0</span> ).<span class="fu">children</span>( <span class="st">&quot;b&quot;</span> ).<span class="fu">eq</span>( <span class="dv">0</span> ).<span class="fu">text</span>();
        <span class="kw">return</span> <span class="fu">Number</span>( val );
      }
    };

<span class="co">/*</span>
<span class="co">    &lt;ul&gt;</span>
<span class="co">      &lt;li&gt;1. hello&lt;/li&gt;</span>
<span class="co">      &lt;li&gt;2. world&lt;/li&gt;</span>
<span class="co">      &lt;li&gt;3. i&lt;/li&gt;</span>
<span class="co">      &lt;li&gt;4. am&lt;/li&gt;</span>
<span class="co">      &lt;li&gt;5. foo&lt;/li&gt;</span>
<span class="co">    &lt;/ul&gt;</span>
<span class="co">*/</span></code></pre><p>Let's now write some specs for the plugin. First, we define the markup for a list containing some sample items inside our <code>qunit-fixture</code> element:</p><pre class="sourceCode html"><code class="sourceCode html"><span class="dv">&amp;lt;</span>div id=<span class="dv">&amp;quot;</span>qunit-fixture<span class="dv">&amp;quot;&amp;gt;</span>
    <span class="dv">&amp;lt;</span>ul<span class="dv">&amp;gt;</span>
      <span class="dv">&amp;lt;</span>li<span class="dv">&amp;gt;</span>hello<span class="dv">&amp;lt;</span>/li<span class="dv">&amp;gt;</span>
      <span class="dv">&amp;lt;</span>li<span class="dv">&amp;gt;</span>world<span class="dv">&amp;lt;</span>/li<span class="dv">&amp;gt;</span>
      <span class="dv">&amp;lt;</span>li<span class="dv">&amp;gt;</span>i<span class="dv">&amp;lt;</span>/li<span class="dv">&amp;gt;</span>
      <span class="dv">&amp;lt;</span>li<span class="dv">&amp;gt;</span>am<span class="dv">&amp;lt;</span>/li<span class="dv">&amp;gt;</span>
      <span class="dv">&amp;lt;</span>li<span class="dv">&amp;gt;</span>foo<span class="dv">&amp;lt;</span>/li<span class="dv">&amp;gt;</span>
    <span class="dv">&amp;lt;</span>/ul<span class="dv">&amp;gt;</span>
  <span class="dv">&amp;lt;</span>/div<span class="dv">&amp;gt;</span></code></pre><p>Next, we need to think about what should be tested. <code>$.enumerate()</code> supports a few different use cases, including:</p><ul><li><strong>No arguments passed</strong> - i.e <code>$(el).enumerate()</code></li><li><strong>0 passed as an argument</strong> - i.e <code>$(el).enumerate(0)</code></li><li><strong>1 passed as an argument</strong> - i.e <code>$(el).enumerate(1)</code></li></ul><p>As the text value for each list item is of the form &quot;n. item-text&quot; and we only require this to test against the expected output, we can simply access the content using <code>$(el).eq(index).text()</code> (for more information on .eq() see <a href="http://api.jquery.com/eq/">here</a>).</p><p>and finally, here are our test cases:</p><pre class="sourceCode javascript"><code class="sourceCode javascript">module(<span class="st">&quot;jQuery#enumerate&quot;</span>);

test( <span class="st">&quot;No arguments passed&quot;</span>, <span class="dv">5</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> items = $(<span class="st">&quot;#qunit-fixture li&quot;</span>).<span class="fu">enumerate</span>();
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">0</span>).<span class="fu">text</span>(), <span class="st">&quot;1. hello&quot;</span>, <span class="st">&quot;first item should have index 1&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">1</span>).<span class="fu">text</span>(), <span class="st">&quot;2. world&quot;</span>, <span class="st">&quot;second item should have index 2&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">2</span>).<span class="fu">text</span>(), <span class="st">&quot;3. i&quot;</span>, <span class="st">&quot;third item should have index 3&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">3</span>).<span class="fu">text</span>(), <span class="st">&quot;4. am&quot;</span>, <span class="st">&quot;fourth item should have index 4&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">4</span>).<span class="fu">text</span>(), <span class="st">&quot;5. foo&quot;</span>, <span class="st">&quot;fifth item should have index 5&quot;</span> );
});

test( <span class="st">&quot;0 passed as an argument&quot;</span>, <span class="dv">5</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> items = $(<span class="st">&quot;#qunit-fixture li&quot;</span>).<span class="fu">enumerate</span>( <span class="dv">0</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">0</span>).<span class="fu">text</span>(), <span class="st">&quot;0. hello&quot;</span>, <span class="st">&quot;first item should have index 0&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">1</span>).<span class="fu">text</span>(), <span class="st">&quot;1. world&quot;</span>, <span class="st">&quot;second item should have index 1&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">2</span>).<span class="fu">text</span>(), <span class="st">&quot;2. i&quot;</span>, <span class="st">&quot;third item should have index 2&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">3</span>).<span class="fu">text</span>(), <span class="st">&quot;3. am&quot;</span>, <span class="st">&quot;fourth item should have index 3&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">4</span>).<span class="fu">text</span>(), <span class="st">&quot;4. foo&quot;</span>, <span class="st">&quot;fifth item should have index 4&quot;</span> );
});

test( <span class="st">&quot;1 passed as an argument&quot;</span>, <span class="dv">3</span>, <span class="kw">function</span>() {
  <span class="kw">var</span> items = $(<span class="st">&quot;#qunit-fixture li&quot;</span>).<span class="fu">enumerate</span>( <span class="dv">1</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">0</span>).<span class="fu">text</span>(), <span class="st">&quot;1. hello&quot;</span>, <span class="st">&quot;first item should have index 1&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">1</span>).<span class="fu">text</span>(), <span class="st">&quot;2. world&quot;</span>, <span class="st">&quot;second item should have index 2&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">2</span>).<span class="fu">text</span>(), <span class="st">&quot;3. i&quot;</span>, <span class="st">&quot;third item should have index 3&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">3</span>).<span class="fu">text</span>(), <span class="st">&quot;4. am&quot;</span>, <span class="st">&quot;fourth item should have index 4&quot;</span> );
  equal( <span class="kw">items</span>.<span class="fu">eq</span>(<span class="dv">4</span>).<span class="fu">text</span>(), <span class="st">&quot;5. foo&quot;</span>, <span class="st">&quot;fifth item should have index 5&quot;</span> );
});</code></pre><h2 id="asynchronous-code">Asynchronous code</h2><p>As with Jasmine, the effort required to run synchronous tests with QUnit is fairly straight-forward. That said, what about tests that require asynchronous callbacks (such as expensive processes, Ajax requests and so on)? When we're dealing with asynchronous code, rather than letting QUnit control when the next test runs, we can inform that we need it to stop running and wait until it's okay to continue once again.</p><p>Remember: running asynchronous code without any special considerations can cause incorrect assertions to appear in other tests, so we want to make sure we get it right.</p><p>Writing QUnit tests for asynchronous code is made possible using the <code>start()</code> and `<code>stop()</code> methods, which programmatically set the start and stop points during such tests. Here's a simple example:</p><pre class="sourceCode javascript"><code class="sourceCode javascript">test(<span class="st">&quot;An async test&quot;</span>, <span class="kw">function</span>(){
   stop();
   expect( <span class="dv">1</span> );
   $.<span class="fu">ajax</span>({
        <span class="dt">url</span>: <span class="st">&quot;/test&quot;</span>,
        <span class="dt">dataType</span>: <span class="ch">&#39;json&#39;</span>,
        <span class="dt">success</span>: <span class="kw">function</span>( data ){
            deepEqual(data, {
               <span class="dt">topic</span>: <span class="st">&quot;hello&quot;</span>,
               <span class="dt">message</span>: <span class="st">&quot;hi there!&quot;</span>
            });
            start();
        }
    }); 
});</code></pre><p>A jQuery <code>$.ajax()</code> request is used to connect to a test resource and assert that the data returned is correct. <code>deepEqual()</code> is used here as it allows us to compare different data types (e.g objects, arrays) and ensures that what is returned is exactly what we're expecting. We know that our Ajax request is asynchronous and so we first call <code>stop()</code>, run the code making the request and finally at the very end of our callback, inform QUnit that it is okay to continue running other tests.</p><p>Note: rather than including <code>stop()</code>, we can simply exclude it and substitute <code>test()</code> with <code>asyncTest()</code> if we prefer. This improves readability when dealing with a mixture of asynchronous and synchronous tests in your suite. Whilst this setup should work fine for many use-cases, there is no guarantee that the callback in our <code>$.ajax()</code> request will actually get called. To factor this into our tests, we can use <code>expect()</code> once again to define how many assertions we expect to see within our test. This is a healthy safety blanket as it ensures that if a test completes with an insufficient number of assertions, we know something went wrong and fix it.</p>
</body>
</html>

